Lecture - ( Constructor & Its Types )

Constructor :- 

-> It is a special method of class which automatically invoked whenever a instance of class is created.
-> Like a method it contains set of instruction which are execute at the time of object creation.
-> It is used to assign initial values to the datamember of that same class .
-> Constructor name is same name as a class name.
-> A class can have any nymmber of constructors but there should be difference like making a parameterize or something else.
-> Constructor can not be final , abstract or syncrhonized

Example :- 
 class Constructorclass
 {
     public Constructorclass()
     {
         Console.WriteLine("Welcome Back");
     }
 }

Types Of Constructor :- 
1. Default Constructor 
2. Parameterized Constructor 
3. Copy Constructor 
4. Private Constructor 
5. Static Constructor 

1. Default Constructor :- 
-> It have no parameters 
-> All time u create a object for this class inside a method which is inside that class only , value for all variables intiliaze with same values , until u are not initializing them. And to access those variables u have to create a method with in same class only.

2. Parameterized Constructor :- 
-> Its just nothing more than passing values during creating a object of a constructor 

3. Copy Constructor :- 
-> When u wanna create a object of a constructor , but using values of previous object of same constructor 
-> Its is useful when u wanna create a object based on previous object created 
-> for copyconstructor , u need to pass an previously created object in which u are passing values 

4. Private Constructor :- 
-> It can be called inside that class only where its defined
-> When u dont wanna to create a object from your class 
-> U are creating a singleton where a single object of class is exist
-> You wanna class to hold static methods , properties and etc and its should  not be initiated .

5. Static Constructor :- 
-> Its does not have any access modifier 
-> It automatically invoked before first reference to static member to a class .
-> It can't called directly 


Lecture - ( Inheritance & Its Types )

Inheritance :- 
-> Basically where a child class inherits properties , method or variables of parent class or base class

Types Of Inheritance :- 
1. Single Inheritance
2. Multilevel Inheritance
3. Heiraichal Inheritance
4. Multiple 

1. Single Inheritance :- 
-> Let suppose there are two classess , one is A and another one is B . A is a parent class which will be inherit by class B which is a child class , that's a single inheritance .

2. Multilevel Inheritance :- 
-> Let suppose there are three classess A , B , C . So there will be a parent class A for B and B for C . This is known as Multilevel Inheritance 

3. Herarchical Inheritance :- Similar to above one , only the difference is A class can be parent class for B & C both .

4. Multiple & Hybrid Inheritance :- In C# it is not possible to do using classess , but its possible through interface
Interface :- In a class where interface is inherited , only there we give body of that interface

Lecture - ( Encapsulation ) 

-> Binding a data and information in a single unit 
-> Basically in this members which are inside that class are hide from another class , they are only accessible through function or method which are present in that class only 
-> It can be achieved by creating private variables and getting or setting values through properties
-> It's better to hide inner implemenmtation of class , flexibility according to requirements . 
-> Overall we are not accessing , how data is stored in a variables


Lecture - ( Abstraction ) :- Pending

-> Basically which only shows that info which is important for user , and not that which is not imp to user 

Lecture :- ( Abstract Class )
-> Basically when we want to define a common for group of related classess , so for that we use abstract class 
-> In this only method are defines and we provide their body in which this class is inherited .
-> Object class can not be created for this type of classess .
-> we can use abstract class during inheritance 
-> If there is a abstract method inside abstract class , then to give implementation of that body in child class we need to use override keyword
-> It can't be static.
-> If there is a normal method in abstract class , then it work normally like using virtual and override keyword

In encapsulation we are hiding inner implementation of that class , but in abstraction we not doing that much instead of it we are trying to show only info which is imp to user .


Lecture :- ( Interface ) 

-> Similar to class
-> It also contains methods , properties and events 
-> It only contains declaration of members which are inside interface 
-> Implementation of those members which are inside this interface , will going to be done inside that class which inherits that interface 
-> Interface can't be private , because if they are private then there's no use of those interface 
-> All members are prublic and abstract by default which are inside interface 
-> We implement multiple interface inside a single class
-> In above 7.3 version of C# , u can use public keyword inside interface , but less than it no need to use public keyword

Lecture - ( Array List ) 
-> It's a non-generic means u can store element of any type which is defined in system.collection namespace .
-> size of arraylist can be change according to no of elements 
-> It can implement IEnumerable , Icollection , IList

ArrayList can have 3 Constructors :- 
1. ArrayList() :- This is empty and have no starting size 
2. ArrayList(int32) :- Its empoty but have some intial capacity
3. ArrayList(ICollection) :- Means u can intialize with some existing collections like array , list and etc . And have same initial capacity 

Lecture :- ( String & StringBuilder ) 

-> StringBuilder concept is define because we can do any changes in string , but with the help of stringbuilder we can do that

Lecture - ( Indexers ) 

-> With the help of indexers , u can access elements which are inside the object of class like an accessing is working in array. And Even u can change values too at particular position 
-> It can use multiple parameters
-> Multidimensional arrays are also same like it 

Lecture - ( Properties ) :-

-> These are those types of class members which provide a flexible way to read and write data .
-> It's easy way to access data
-> The block set & Get is known as accessor 
-> Properties is same as like variables only the difference is we are using get and set accessors to not to access variables directly

There are 4 types of properties :- 
1. Read Only
2. Read-Write Only
3. Write Only
4. Auto Implemented Prop :- It introduced in 3.0 version of c#

-> In properties we can't use ref and out keyword
-> We can't use multiple get or set accessors for a single property
-> We can't change the value inside accessor

Lecture - ( Polymorphism ) 

-> It means many forms
-> A single interface can be used for different datatypes for improving code flexibility and reusibility 
-> It can be achieve through method overloading and method overriding 
-> basically ek hi method ke multiple forms 

Types Of Polymorphism :- 
1. Compile Time ( Method Overloading & Operator Overloading )
2. Run Time ( Method Overriding )


Lecture - ( Struct ) 

-> It helps us to make a single variable which can hold variables of different data types
-> For this we use struct keyword
-> By default variables inside struct is private
-> Like classess structs can not inherit in another class or structs
-> Structs can implement one or more than one interfaces
-> Structs cane not be abstract , virtual or protected 
-> It does not have default constructor
-> It doesn't support inheritance
-> classess are ref type but structs are value type



Ways to intialize a structure :- 
1. Using parameterized constructor
2. Using new keyword
3. Without using new keyword , u can initialize them before use 


Immutable Structs :- means in which we can't anything , and for that we use readonly keyword with variables which are inside struct































